using System;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Security.Cryptography;

namespace SchetsEditor
{
    public interface ISchetsTool
    {
        void MuisVast(SchetsControl s, Point p);
        void MuisDrag(SchetsControl s, Point p);
        void MuisLos(SchetsControl s, Point p);
        void Letter(SchetsControl s, char c);
    }

    public abstract class StartpuntTool : ISchetsTool
    {
        protected Point startpunt;
        protected Brush kwast;
        protected Color kwastKleur = Color.FromArgb(255, 0, 0);
        protected iTekenObject laatstGetekendObject;
        protected SchetsControl schetsControl;

        public virtual Color Kwastkleurmethode(Brush kwast)
        {
            SolidBrush brush = (SolidBrush)kwast;
            return brush.Color;
        }

        public virtual void MuisVast(SchetsControl s, Point p)
        {   startpunt = p;
            schetsControl = s;
        }
        public virtual void MuisLos(SchetsControl s, Point p)
        {   kwast = new SolidBrush(s.PenKleur);
        }
        public abstract void MuisDrag(SchetsControl s, Point p);
        public abstract void Letter(SchetsControl s, char c);
    }

    public class TekstTool : StartpuntTool
    {
        public override string ToString() { return "tekst"; }

        public override void MuisDrag(SchetsControl s, Point p) { }

        public override void MuisLos(SchetsControl s, Point p)
        {
            base.MuisLos(s, p);

            /*letterObject = new TekstObject();
            s.getekendeObjecten.Add((TekenObject)letterObject);

            printGetekendeObjecten(s);*/
        }


        public override void Letter(SchetsControl s, char c)
        {
            if (c >= 32)
            {
                Graphics gr = s.MaakBitmapGraphics();
                Font font = new Font("Tahoma", 40);
                string tekst = c.ToString();
                SizeF sz = 
                gr.MeasureString(tekst, font, this.startpunt, StringFormat.GenericTypographic);
                gr.DrawString   (tekst, font, kwast, 
                                              this.startpunt, StringFormat.GenericTypographic);
                // gr.DrawRectangle(Pens.Black, startpunt.X, startpunt.Y, sz.Width, sz.Height);
                startpunt.X += (int)sz.Width;
                s.Invalidate();
            }
        }
    }

    public abstract class TweepuntTool : StartpuntTool
    {
        public Point eindpunt;
        public static Rectangle Punten2Rechthoek(Point p1, Point p2)
        {   return new Rectangle( new Point(Math.Min(p1.X,p2.X), Math.Min(p1.Y,p2.Y))
                                , new Size (Math.Abs(p1.X-p2.X), Math.Abs(p1.Y-p2.Y))
                                );
        }
        public static Pen MaakPen(Brush b, int dikte)
        {   Pen pen = new Pen(b, dikte);
            pen.StartCap = LineCap.Round;
            pen.EndCap = LineCap.Round;
            return pen;
        }
        public override void MuisVast(SchetsControl s, Point p)
        {   base.MuisVast(s, p);
            kwast = Brushes.Gray;
            startpunt = p;
        }
        public override void MuisDrag(SchetsControl s, Point p)
        {   s.Refresh();
            this.Bezig(s.CreateGraphics(), this.startpunt, p);
        }
        public override void MuisLos(SchetsControl s, Point p)
        {   base.MuisLos(s, p);
            eindpunt = p;
            this.Compleet(s.MaakBitmapGraphics(), this.startpunt, p);
            if (laatstGetekendObject != null)
            {
                //schetsControl.getekendeObjecten.Add(laatstGetekendObject);
            }
            s.Invalidate();
        }
        public override void Letter(SchetsControl s, char c)
        {
        }
        public abstract void Bezig(Graphics g, Point p1, Point p2);
        public abstract void Bezig(Graphics g, Point p1, Point p2, Brush kwast);

        public virtual void Compleet(Graphics g, Point p1, Point p2)
        {   this.Bezig(g, p1, p2);
        }
    }

    public class OvaalTool : TweepuntTool

    {
        public override string ToString() { return "ovaal"; }

        public override void Bezig(Graphics g, Point p1, Point p2)
        {
            g.DrawEllipse(MaakPen(kwast, 3), TweepuntTool.Punten2Rechthoek(p1, p2));
        }

        public override void Bezig(Graphics g, Point p1, Point p2, Brush kwast)
        {
            this.kwast = kwast;
            kwastKleur = Color.FromArgb(255, 255, 0);
            g.DrawRectangle(MaakPen(kwast, 3), TweepuntTool.Punten2Rechthoek(p1, p2));
        }
    }

    public class VolOvaalTool : OvaalTool

    {
        public override string ToString() { return "schijf"; }

        public override void Compleet(Graphics g, Point p1, Point p2)
        {
            g.FillEllipse(kwast, TweepuntTool.Punten2Rechthoek(p1, p2));
        }
    }

    public class RechthoekTool : TweepuntTool
    {
        public override string ToString() { return "kader"; }

        public override void Bezig(Graphics g, Point p1, Point p2)
        {
            g.DrawRectangle(MaakPen(kwast,3), TweepuntTool.Punten2Rechthoek(p1, p2));
        }

        public override void Bezig(Graphics g, Point p1, Point p2, Brush kwast)
        {
            this.kwast = kwast;
            kwastKleur = Kwastkleurmethode(kwast);
    
            g.DrawRectangle(MaakPen(kwast, 3), TweepuntTool.Punten2Rechthoek(p1, p2));
        }
        public override void MuisLos(SchetsControl s, Point p)
        {
            base.MuisLos(s, p);

            RechthoekObject rechthoek = new RechthoekObject(startpunt, eindpunt, kwastKleur);
            s.getekendeObjecten.Add(rechthoek);
            s.printGetekendeObjecten();
        }
    }
    
    public class VolRechthoekTool : RechthoekTool
    {
        public override string ToString() { return "vlak"; }

        public override void Compleet(Graphics g, Point p1, Point p2)
        {   g.FillRectangle(kwast, TweepuntTool.Punten2Rechthoek(p1, p2));
        }
    }

    public class LijnTool : TweepuntTool
    {
        public override string ToString() { return "lijn"; }

        public override void Bezig(Graphics g, Point p1, Point p2)
        {   g.DrawLine(MaakPen(this.kwast,3), p1, p2);
        }
        public override void Bezig(Graphics g, Point p1, Point p2, Brush kwast)
        {
            this.kwast = kwast;
            kwastKleur = Color.FromArgb(255, 255, 255);
            g.DrawRectangle(MaakPen(kwast, 3), TweepuntTool.Punten2Rechthoek(p1, p2));
        }
    }

    public class PenTool : LijnTool
    {
        public override string ToString() { return "pen"; }

        public override void MuisDrag(SchetsControl s, Point p)
        {   this.MuisLos(s, p);
            this.MuisVast(s, p);
        }
    }
    
    public class GumTool : ISchetsTool
    {
        public override string ToString() { return "gum"; }

        public virtual void printGetekendeObjecten(SchetsControl s) { }

        public void Letter(SchetsControl s, char c) { }
        public void MuisDrag(SchetsControl s, Point p) { }
        public void MuisVast(SchetsControl s, Point p) 
        {
            foreach (TekenObject obj in s.getekendeObjecten)
            {
                Console.Write(obj.geselecteerd(s, p));
                Console.Write(", ");
            }
            Console.WriteLine();

            foreach (TekenObject obj in s.getekendeObjecten)
            {
                if (obj.geselecteerd(s, p))
                    {
                        obj.verwijder(s);
                    }
            }
        }

        public void MuisLos(SchetsControl s, Point p)
        {
                s.TekenObjecten();
        }


    }
}
